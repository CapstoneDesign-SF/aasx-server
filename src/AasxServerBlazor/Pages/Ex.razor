@page "/ex";
@using AasxServer
@using Microsoft.AspNetCore.Html;
@using Microsoft.IdentityModel.Tokens;
@using Extensions;
@inject NavigationManager NavMan

<div>
    @{
        collectData();

        <b>Nachweis der Eigensicherheit</b>
        <br />
        <span>Projektbezeichnung: @projectName</span>
        <br />
        <br />

        <b>Zugehörige Betriebsmittel</b><br>
        <table class="table table-bordered table-sm" style="word-wrap:break-word;word-break:break-all;">
            <thead>
                <tr>
                    <th style="word-break:keep-all;width:25%">Bezeichnung</th>
                    <th style="word-break:keep-all;width:25%">Typenbezeichnung</th>
                    <th style="word-break:keep-all;width:25%">Hersteller</th>
                    <th style="word-break:keep-all">Uo</th>
                    <th style="word-break:keep-all">Io</th>
                    <th style="word-break:keep-all">Po</th>
                    <th style="word-break:keep-all">Lo</th>
                    <th style="word-break:keep-all">Co</th>
                </tr>
            </thead>
            <tbody>
                @{
                    for (int i = 0; i < count; i++)
                    {
                        if (isOutput[i])
                        {
                            <tr>
                                <td>@ManufacturerProductDesignation[i]</td>
                                <td>@ManufacturerProductType[i]
                                @{
                                    bool svg = false;
                                    string detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                                    @if (detailsImage != "")
                                    {
                                        if (!svg)
                                        {
                                            <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                                    src=data:image;base64,@detailsImage />
                                        }
                                        else
                                        {
                                            <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                                src=data:image/svg+xml;base64,@detailsImage />
                                        }
                                    }
                                }
                                </td>
                                <td>@ManufacturerName[i]
                                @{
                                    svg = false;
                                    detailsImage = createDetailsImage(envIndex[i], ManufacturerLogo[i], out svg);

                                    @if (detailsImage != "")
                                    {
                                        if (!svg)
                                        {
                                            <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                                src=data:image;base64,@detailsImage />
                                        }
                                        else
                                        {
                                            <img style="max-height:50px;object-fit:contain" alt="Details Image"
                                                src=data:image/svg+xml;base64,@detailsImage />
                                        }
                                    }
                                }
                                </td>
                                <td>@U[i]</td>
                                <td>@I[i]</td>
                                <td>@P[i]</td>
                                <td>@L[i]</td>
                                <td>@C[i]</td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>

        <b>Eigensichere elektrische Betriebsmittel</b><br />
        <table class="table table-bordered table-sm" style="word-wrap:break-word;word-break:break-all;">
            <thead>
                <tr>
                    <th style="word-break:keep-all;width:25%">Bezeichnung</th>
                    <th style="word-break:keep-all;width:25%">Typenbezeichnung</th>
                    <th style="word-break:keep-all;width:25%">Hersteller</th>
                    <th style="word-break:keep-all">Ui</th>
                    <th style="word-break:keep-all">Ii</th>
                    <th style="word-break:keep-all">Pi</th>
                    <th style="word-break:keep-all">Li</th>
                    <th style="word-break:keep-all">Ci</th>
                </tr>
            </thead>
            <tbody>
                @{
                    for (int i = 0; i < count; i++)
                    {
                        if (!isOutput[i])
                        {
                            bool svg = false;
                            string detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                            <tr>
                                <td>@ManufacturerProductDesignation[i]</td>
                                <td>@ManufacturerProductType[i]
                                @{
                                    svg = false;
                                    detailsImage = createDetailsImage(envIndex[i], ProductImage[i], out svg);

                                    @if (detailsImage != "")
                                    {
                                        if (!svg)
                                        {
                                            <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                                src=data:image;base64,@detailsImage />
                                        }
                                        else
                                        {
                                            <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                                src=data:image/svg+xml;base64,@detailsImage />
                                        }
                                    }
                                }
                                </td>
                                <td>@ManufacturerName[i]
                                @{
                                    svg = false;
                                    detailsImage = createDetailsImage(envIndex[i], ManufacturerLogo[i], out svg);

                                    @if (detailsImage != "")
                                    {
                                        if (!svg)
                                        {
                                            <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                    src=data:image;base64,@detailsImage />
                                        }
                                        else
                                        {
                                            <img style="max-height:100px;object-fit:contain" alt="Details Image"
                                    src=data:image/svg+xml;base64,@detailsImage />
                                        }
                                    }
                                }
                                </td>
                                <td>@U[i]</td>
                                <td>@I[i]</td>
                                <td>@P[i]</td>
                                <td>@L[i]</td>
                                <td>@C[i]</td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
        <br />
        <span>Kabellänge: @cableLength</span>
    }
</div>

@code
{
    SubmodelElementCollection project = null;
    string projectName = "";
    double cableLength = 0;
    string eigensicheresbetriebsmittel = "";
    string zugehoerigesbetriebsmittel = "";

    int count = 0;
    List<bool> isOutput = null;
    List<int> envIndex = null;
    List<Submodel> Nameplate = null;
    List<Submodel> TechnicalData = null;
    List<string> ManufacturerProductDesignation = null;
    List<string> ManufacturerProductType = null;
    List<string> ManufacturerName = null;
    List<string> ManufacturerLogo = null;
    List<string> ProductImage = null;
    List<SubmodelElementCollection> SafetyRelatedPropertiesForActiveBehaviour = null;
    List<SubmodelElementCollection> SafetyRelatedPropertiesForPassiveBehaviour = null;
    List<Double> U = null;
    List<Double> I = null;
    List<Double> P = null;
    List<Double> L = null;
    List<Double> C = null;

    void collectData()
    {
        count = 0;
        isOutput = new List<bool>();
        envIndex = new List<int>();
        Nameplate = new List<Submodel>();
        TechnicalData = new List<Submodel>();
        ManufacturerProductDesignation = new List<string>();
        ManufacturerProductType = new List<string>();
        ManufacturerName = new List<string>();
        ManufacturerLogo = new List<string>();
        ProductImage = new List<string>();
        SafetyRelatedPropertiesForActiveBehaviour = new List<SubmodelElementCollection>();
        SafetyRelatedPropertiesForPassiveBehaviour = new List<SubmodelElementCollection>();
        U = new List<double>();
        I = new List<double>();
        P = new List<double>();
        L = new List<double>();
        C = new List<double>();

        int aascount = AasxServer.Program.env.Length;

        for (int i = 0; i < aascount; i++)
        {
            var env = AasxServer.Program.env[i];
            if (env != null)
            {
                var aas = env.AasEnv.AssetAdministrationShells[0];

                if (aas.Submodels != null && aas.Submodels.Count > 0)
                {
                    foreach (var smr in aas.Submodels)
                    {
                        var sm = env.AasEnv.FindSubmodel(smr);
                        {
                            if (sm != null && sm.IdShort != null)
                            {
                                if (sm.IdShort.ToLower() == "nachweiseigensicherheit" && sm.SubmodelElements != null)
                                {
                                    var sme = findeSME(sm: sm, idShortPath: "projekt", ignore: true, contains: true);
                                    if (sme != null && sme is SubmodelElementCollection smc)
                                    {
                                        project = smc;
                                        sme = findeSME(smc: project, idShortPath: "projektbezeichnung", ignore: true);
                                        if (sme != null)
                                            projectName = sme.ValueAsText();
                                        sme = findeSME(smc: project, idShortPath: "eigensicheresbetriebsmittel", ignore: true);
                                        if (sme != null)
                                            eigensicheresbetriebsmittel = sme.ValueAsText();
                                        sme = findeSME(smc: project, idShortPath: "zugehoerigesbetriebsmittel", ignore: true);
                                        if (sme != null)
                                            zugehoerigesbetriebsmittel = sme.ValueAsText();
                                        sme = findeSME(smc: project, idShortPath: "leitungslaenge", ignore: true);
                                        if (sme != null)
                                        {
                                            try
                                            {
                                                cableLength = Convert.ToDouble(sme.ValueAsText());
                                            }
                                            catch { }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "nameplate")
                                {
                                    isOutput.Add(false);
                                    envIndex.Add(i);
                                    Nameplate.Add(sm as Submodel);
                                    ManufacturerProductDesignation.Add("");
                                    ManufacturerProductType.Add("");
                                    ManufacturerName.Add("");
                                    SafetyRelatedPropertiesForActiveBehaviour.Add(null);
                                    SafetyRelatedPropertiesForPassiveBehaviour.Add(null);
                                    U.Add(0);
                                    I.Add(0);
                                    P.Add(0);
                                    L.Add(0);
                                    C.Add(0);

                                    var sme = findeSME(sm: sm, idShortPath: "ManufacturerProductDesignation", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerProductDesignation[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerProductDesignation[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm, idShortPath: "ManufacturerProductType", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerProductType[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerProductType[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm, idShortPath: "ManufacturerName", ignore: true);
                                    if (sme != null)
                                    {
                                        if (sme is Property p)
                                            ManufacturerName[count] = p.Value;
                                        if (sme is MultiLanguageProperty mlp && mlp.Value != null && mlp.Value.Count > 0)
                                        {
                                            ManufacturerName[count] = mlp.Value[0].Text;
                                        }
                                    }

                                    sme = findeSME(sm: sm,
                                        idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety.ExternalElectricalCircuit.SafetyRelatedPropertiesForActiveBehaviour",
                                        ignore: true, contains: true);
                                    if (sme != null)
                                    {
                                        var s = sme as SubmodelElementCollection;
                                        isOutput[count] = true;
                                        SafetyRelatedPropertiesForActiveBehaviour[count] = s;

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputPower", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    P[count] = Convert.ToDouble(p.Value);
                                                }
                                                catch { }                                                
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputVoltage", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    U[count] = Convert.ToDouble(p.Value);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxOutputCurrent", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    I[count] = Convert.ToDouble(p.Value);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxExternalCapacitance", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    C[count] = Convert.ToDouble(p.Value);
                                                }
                                                catch { }
                                            }
                                        }

                                        sme = findeSME(smc: s, idShortPath: "MaxExternalInductance", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is Property p)
                                            {
                                                try
                                                {
                                                    L[count] = Convert.ToDouble(p.Value);
                                                }
                                                catch { }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sme = findeSME(sm: sm,
                                            idShortPath: "Markings.Marking.ExplosionSafeties.ExplosionSafety.ExternalElectricalCircuit.SafetyRelatedPropertiesForPassiveBehaviour",
                                            ignore: true, contains: true);
                                        if (sme != null)
                                        {
                                            var s = sme as SubmodelElementCollection;
                                            SafetyRelatedPropertiesForPassiveBehaviour[count] = s as SubmodelElementCollection;

                                            sme = findeSME(smc: s, idShortPath: "MaxInputPower", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        P[count] = Convert.ToDouble(p.Value);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInputVoltage", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        U[count] = Convert.ToDouble(p.Value);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInputCurrent", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        I[count] = Convert.ToDouble(p.Value);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInternalCapacitance", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        C[count] = Convert.ToDouble(p.Value);
                                                    }
                                                    catch { }
                                                }
                                            }

                                            sme = findeSME(smc: s, idShortPath: "MaxInternalInductance", ignore: true);
                                            if (sme != null)
                                            {
                                                if (sme is Property p)
                                                {
                                                    try
                                                    {
                                                        L[count] = Convert.ToDouble(p.Value);
                                                    }
                                                    catch { }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (sm.IdShort.ToLower() == "technicaldata")
                                {
                                    TechnicalData.Add(sm as Submodel);
                                    ManufacturerLogo.Add("");
                                    ProductImage.Add("");

                                    var sme = findeSME(sm: sm, idShortPath: "GeneralInformation", ignore: true);
                                    if (sme != null)
                                    {
                                        var g = sme as SubmodelElementCollection;
                                        sme = findeSME(smc: g, idShortPath: "ManufacturerLogo", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                                ManufacturerLogo[count] = f.Value;
                                        }
                                        sme = findeSME(smc: g, idShortPath: "ProductImage", ignore: true);
                                        if (sme != null)
                                        {
                                            if (sme is File f)
                                                ProductImage[count] = f.Value;
                                        }
                                    }

                                    count++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ISubmodelElement findeSME(ISubmodel sm = null, ISubmodelElementCollection smc = null, string idShortPath = null,
        bool ignore = false, bool contains = false)
    {
        if (idShortPath == null)
            return null;
        var path = idShortPath.Split(".");

        int level = 0;
        List<ISubmodelElement>[] levelSMEs = new List<ISubmodelElement>[path.Length];
        int[] iLevel = new int[path.Length];
        iLevel[0] = 0;

        if (sm != null)
        {
            levelSMEs[0] = sm.SubmodelElements;
        }
        else if (smc != null)
        {
            levelSMEs[0] = smc.Value;
        }
        else
            return null;

        while (level >= 0 && level < path.Length && levelSMEs[level] != null && levelSMEs[level].Count != 0)
        {
            while (level >= 0 && iLevel[level] < levelSMEs[level].Count)
            {
                ISubmodelElement sme = levelSMEs[level][iLevel[level]];
                string id1 = sme.IdShort;
                string id2 = path[level];
                if (ignore)
                {
                    id1 = id1.ToLower();
                    id2 = id2.ToLower();
                }
                if (id1 == id2 || (contains && id1.Contains(id2)))
                {
                    if (level == path.Count() - 1)
                        return sme;
                    if (sme is SubmodelElementCollection smc2)
                    {
                        iLevel[level]++;
                        levelSMEs[level + 1] = smc2.Value;
                        iLevel[level + 1] = 0;
                        level++;
                        continue;
                    }
                }
                iLevel[level]++;
                while (level >= 0 && iLevel[level] == levelSMEs[level].Count)
                {
                    level--;
                }
            }
        }

        return null;
    }

    public static string createDetailsImage(int envIndex, string filePath, out bool svg)
    {
        svg = false;

        if (!string.IsNullOrEmpty(filePath))
        {
            string[] split = filePath.Split(new Char[] { '/' });
            if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
            {
                split = filePath.Split(new Char[] { '.' });
                switch (split.Last().ToLower())
                {
                    case "jpg":
                    case "bmp":
                    case "png":
                    case "svg":
                        try
                        {
                            using (System.IO.Stream s = Program.env[envIndex].GetLocalStreamFromPackage(filePath))
                            {
                                if (s != null)
                                {
                                    using (var m = new System.IO.MemoryStream())
                                    {
                                        if (split.Last().ToLower() == "svg")
                                        {
                                            svg = true;
                                        }
                                        s.CopyTo(m);
                                        return System.Convert.ToBase64String(m.ToArray());
                                    }
                                }
                            }
                        }
                        catch { }
                        break;
                }
            }
        }

        return "";
    }
}
